name: Health Bridge CD

on:
  push:
    branches: [main]
  workflow_run:
    workflows: ["Health Bridge CI"]
    types: [completed]
    branches: [main]

env:
  NODE_VERSION: '18'

jobs:
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.workflow_run.conclusion == 'success'
    environment:
      name: staging
      url: https://health-bridge-staging.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.STAGING_API_URL }}
          NEXT_PUBLIC_APP_NAME: Health Bridge (Staging)
          NODE_ENV: production

      # Deploy Frontend to Vercel
      - name: Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}
          alias-domains: health-bridge-staging.vercel.app

      # Deploy Backend to Railway/Render
      - name: Deploy Backend to Railway
        uses: railway-deploy/railway-deploy@v3
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          service: health-bridge-backend-staging
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.STAGING_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.STAGING_JWT_REFRESH_SECRET }}
          REDIS_URL: ${{ secrets.STAGING_REDIS_URL }}
          NODE_ENV: production

  # Staging Health Check
  staging-health-check:
    name: Staging Health Check
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    steps:
      - name: Check Frontend Health
        run: |
          curl -f https://health-bridge-staging.vercel.app/api/health || exit 1

      - name: Check Backend Health
        run: |
          curl -f ${{ secrets.STAGING_API_URL }}/health || exit 1

      - name: Run Smoke Tests
        run: |
          curl -f ${{ secrets.STAGING_API_URL }}/auth/health || exit 1
          curl -f ${{ secrets.STAGING_API_URL }}/patients/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [staging-health-check]
    environment:
      name: production
      url: https://healthbridge.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          NEXT_PUBLIC_APP_NAME: Health Bridge
          NODE_ENV: production

      # Deploy Frontend to Vercel Production
      - name: Deploy Frontend to Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./apps/frontend
          scope: ${{ secrets.VERCEL_ORG_ID }}

      # Deploy Backend to Production
      - name: Deploy Backend to Production
        uses: railway-deploy/railway-deploy@v3
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN }}
          service: health-bridge-backend-production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.PRODUCTION_JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.PRODUCTION_JWT_REFRESH_SECRET }}
          REDIS_URL: ${{ secrets.PRODUCTION_REDIS_URL }}
          NODE_ENV: production

  # Production Health Check
  production-health-check:
    name: Production Health Check
    runs-on: ubuntu-latest
    needs: [deploy-production]
    steps:
      - name: Check Production Health
        run: |
          curl -f https://healthbridge.app/api/health || exit 1
          curl -f ${{ secrets.PRODUCTION_API_URL }}/health || exit 1

      - name: Run Production Smoke Tests
        run: |
          curl -f ${{ secrets.PRODUCTION_API_URL }}/auth/health || exit 1

      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'üöÄ Health Bridge successfully deployed to production!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on Failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [production-health-check]
    if: failure()
    steps:
      - name: Rollback Production Deployment
        run: |
          echo "Rolling back production deployment..."
          # Add rollback logic here

      - name: Notify Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '‚ö†Ô∏è Health Bridge production deployment failed. Rollback initiated.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}